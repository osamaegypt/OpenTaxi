@startuml

skinparam nodesep 100
skinparam defaultFontSize 14
skinparam titleFontSize 30
title "Hamba class diagram v1\n"

class Account {
    id: Int
    firstName: String
    surname: String
    nickname: String
    email: String
    phoneNumber: Long
    notification_token: String
    registeredAt: Date
    balance: Double
    role: UserRole
}

enum UserAccountStatus {
    LIVE
    WAITING_FOR_APPROVAL
    UNPAID_SUBSCRIPTION
    TEMPORARILY_SUSPENDED
    DEFINITIVELY_BANNED
}

enum UserRole {
    RIDER
    DRIVER
    ADMIN
}

'class PaymentCard {
'    cardNumber: String
'    expirationDate: Pair<Int, Int>
'    code: Int
'}

class Driver {
    profilePictureURL: String
    idImageURL: String
    driverLicenseURL: String
    proofOfResidenceURL: String
    bankAccountConfirmationURL: String
    additionalCertificationURLs: List<String>
    otherPlatformRatingURL: String
    bio: String
    isSouthAfricanCitizen: Boolean
    address: String
    alternativePhoneNumber: Long
    onlineStatus: OnlineStatus
    priceByMinute: double
    priceByKm: double
    setFareSettings(priceByMinute: double, priceByKm: double)
}

class Rider {
    driverGenderPreference: DriverGenderPreference
    getRecentPlaces()
    getSavedPlaces(page: Int, numberOfPlaces: Int)
    getPreviousBookings(page: Int, numberOfBookings: Int)
}

class Booking {
    id: Int
    bookedAt: DateTime
    driverId: Int
    riderId: Int
    departureAddress: String
    destinationAddress: String
    book(dispatcher: Dispatcher)
    bookDriver(driver: Driver)
    bookReturn()
    bookReturnWithTheSameDriver()
}

class OnlineStatus {
    isOnline: Boolean
    goOnline(driverId: Int)
    goOffline(driverId: Int)
}

class Dispatcher {
    dispatch()
}

class CasualDispatcher {
}

class StandardDispatcher {
}

class PremiumDispatcher {
}

class VanDispatcher {
}

class SpecialistDispatcher {
}

class LiteDispatcher {
}

class Subscription {
    id: Int
    price: Double
    startedAt: DateTime
    endAt: DateTime
    paymentGatewayTransactionID: Long
    isSubscriptionValid(): Boolean
}

enum DriverGenderPreference {
    MALE
    FEMALE
    BOTH
}

class Trip {
    id: Int
    startedAt: DateTime
    finishedAt: DateTime
    securityVideoURl: String
    getEstimateTimeOfArrival(): DateTime
    startTrip()
    endTrip()
    addStop(place: Place)
    shareTrip(watcherEmail: String)
}

'class Place {
'    address: String
'    latitude: Double
'    longitude: Double
'}

enum TripStatus {
    DRIVER_ON_THE_WAY
    IN_PROGRESS
    FINISHED
    CANCELED
}

class Car {
    id: Int
    registrationNumber: String
    brand: String
    model: String
    color: String
    numberOfSeats: Int
    additionalInfo: String
}

class BusinessCar {
    isAvailable: Boolean
}

class BusinessCarCalendar {
    getFreeTimeSlots(interval: TimeSlot): List<TimeSlot>
    getReservedTimeSlots(): List<TimeSlot>
    releaseTimeSlot(timeSlot: TimeSlot): void
}

class TimeSlot {
    startTime: DateTime
    endTime: DateTime
    assignedDriver: Driver
    getDuration(): Duration
}
class BusinessAccount {
    businessName
    businessPhoneNumber
    VATNumber
    numberOfDrivers
    subscription: Subscription
}
note right: Extend from Account. \nArrow absent for readability.

abstract class Payment {
    id: Int
    amount: Double
    dateTime: DateTime
    payerId: Int
    status: PaymentStatus
    paymentGatewayTransactionID: Long
    makePayment()
}

class CardPayment {
}

class CashPayment {
}

class KittyPayment {
    recipientId: Int
    setMessageForTheRecipient(message: String)
    acceptPayment()
    refusePayment()
}

class PartnerPayment {
    recipientID: Int
    requestPayment(payerEmail: String, messageForThePayer: String)
}

enum PaymentStatus {
    SUCCESS
    FAILED
    REFUSED
    WAITING_FOR_CONFIRMATION
}

enum PaymentType {
    CASH
    CARD
    PARTNER_PAYMENT
    kITTY_PAYMENT
}

enum CarType {
    STANDARD
    PREMIUM
    VAN
    SPECIALIST
    LITE
}

class Review {
    id: Int
    rating: Int
    comment: String
    authorId: Int
    recipientId: Int
    submit()
}

Account <|--- Rider
Account <|--- Driver
'Rider "1" - "*" Place : Saved Places
'Rider "1" - "*" Place : Recent Places
Driver "*" - "*" Rider: Favorite Drivers
Driver " * " --- " *  " Car
Subscription "1" - "1" Driver : Current subscription
Booking "1" - "1" Trip
Trip "1" - "1" TripStatus
BusinessCar "1" --- "*" Booking
CarType "1" - "1" Car
UserAccountStatus "1" - "1" Account
Payment "1" - "1" Booking
Account - Review
Subscription -[hidden]- DriverGenderPreference
CardPayment --|> Payment
Payment <|-- CashPayment
Payment <|--- KittyPayment
Payment <|-- PartnerPayment
PaymentStatus -[hidden] CarType
UserRole -[hidden] UserAccountStatus
StandardDispatcher --|> Dispatcher
Dispatcher <|-- CasualDispatcher
Dispatcher <|- LiteDispatcher
Dispatcher <|- SpecialistDispatcher
VanDispatcher --|> Dispatcher
Dispatcher <|-- PremiumDispatcher
Car -[hidden] Dispatcher
BusinessAccount "1" -- "* " BusinessCar
Car <|- BusinessCar
BusinessCar "1" - "1" BusinessCarCalendar
BusinessCarCalendar "1 " o-- " * " TimeSlot
PaymentType "1" - "1" Payment


@enduml